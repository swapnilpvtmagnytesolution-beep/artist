# Generated by Django 5.2 on 2025-08-31 16:00

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('events', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MediaProcessingJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('job_type', models.CharField(choices=[('resize', 'Image Resize'), ('watermark', 'Add Watermark'), ('thumbnail', 'Generate Thumbnail'), ('compress', 'Video Compression'), ('transcode', 'Video Transcoding')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('parameters', models.JSONField(blank=True, default=dict)),
                ('result_file_path', models.CharField(blank=True, max_length=500, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'media_processing_jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StorageUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_files', models.IntegerField(default=0)),
                ('total_size_bytes', models.BigIntegerField(default=0)),
                ('photo_count', models.IntegerField(default=0)),
                ('photo_size_bytes', models.BigIntegerField(default=0)),
                ('video_count', models.IntegerField(default=0)),
                ('video_size_bytes', models.BigIntegerField(default=0)),
                ('reel_count', models.IntegerField(default=0)),
                ('reel_size_bytes', models.BigIntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'storage_usage',
            },
        ),
        migrations.CreateModel(
            name='MediaFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file_name', models.CharField(max_length=255)),
                ('original_name', models.CharField(max_length=255)),
                ('file_path', models.CharField(max_length=500)),
                ('file_size', models.BigIntegerField()),
                ('file_type', models.CharField(choices=[('photo', 'Photo'), ('video', 'Video'), ('reel', 'Reel'), ('document', 'Document')], max_length=20)),
                ('mime_type', models.CharField(max_length=100)),
                ('storage_provider', models.CharField(choices=[('local', 'Local Storage'), ('aws', 'AWS S3'), ('gcp', 'Google Cloud Storage'), ('digitalocean', 'DigitalOcean Spaces')], default='local', max_length=20)),
                ('storage_bucket', models.CharField(blank=True, max_length=100, null=True)),
                ('width', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('duration', models.FloatField(blank=True, null=True)),
                ('is_processed', models.BooleanField(default=False)),
                ('processing_error', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media_files', to='events.event')),
            ],
            options={
                'db_table': 'media_files',
                'ordering': ['-created_at'],
            },
        ),
    ]
